[package]
name = "teleia"
version = "0.1.0"
authors = ["LLLL Colonq <llll@colonq.computer>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[profile.release]
opt-level = 2
codegen-units = 1

[profile.dev.package."*"]
opt-level = 2

[dependencies]
glow = {version = "=0.13.1", features = []} # rendering
tobj = "*" # loader for .obj meshes loader
gltf = {path = "deps/gltf", features = ["extras", "names", "utils"]} # loader for .gltf scenes
# gltf = {version = "*", features = ["extras", "names"]} # model loader
image = "*" # texture loader
fontdue = "*" # truetype fonts
glam = "0.29" # linear algebra
log = "*" # logging
rand = {version = "=0.8.5", features = ["small_rng"]} # rng
serde = {version = "*", features = ["derive"]} # serialization
serde_json = "*" # serialize JSON
enum-map = "*" # fast maps with enums as keys
bimap = "*" # bijective maps
reqwest = "*" # http requests
bytes = "*" # bytes for http responses
bitflags = "*" # bitwise flags
color-eyre = { version = "*", default-features = false } # error reporting and formatting
rapier3d = "*" # rigid-body physics
parry3d = "*" # collision detection
nalgebra = {version = "0.33.2", features = ["convert-glam029"]} # linear algebra library for rapier3d

[target.'cfg(target_arch = "wasm32")'.dependencies]
winit = {version = "=0.29.15", features = ["serde"]} # windowing and events
getrandom = {version = "*", features = ["js"]} # rng in the browser
console_log = "*" # log to browser console
console_error_panic_hook = "*" # log to browser console on panic
tracing-wasm = "*" # trace performance in browser
wasm-bindgen = "*" # interface with javascript
wasm-bindgen-futures = "*" # interface with async javascript
js-sys = "*" # browser APIs to interact with JS runtime (e.g. run WASM)
web-sys = { version = "*", features = ["Document", "Window", "Element", "HtmlCanvasElement", "WebGl2RenderingContext", "Headers", "Request", "RequestInit", "RequestMode", "Response", "Performance", "PerformanceTiming", "AudioContext", "AudioNode", "AudioDestinationNode", "AudioBuffer", "AudioBufferSourceNode", "BinaryType", "Blob", "CloseEvent", "ErrorEvent", "FileReader", "MessageEvent", "ProgressEvent", "WebSocket", "Storage"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
env_logger = "*" # configurable logging to stdout
tokio = { version = "*", features = ["full"] } # async runtime
glfw = { path = "deps/glfw-rs", features = ["serde"] } # window management
kira = "=0.9.6" # audio
directories = { path = "deps/directories-rs" } # standard system directories